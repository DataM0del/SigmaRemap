package remapped;

import java.io.UnsupportedEncodingException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.charset.CharacterCodingException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import org.java_websocket.exceptions.InvalidDataException;

public class class_3687 {
   private static final CodingErrorAction field_18069 = CodingErrorAction.REPORT;
   private static final int[] field_18068 = new int[]{
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      8,
      8,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      10,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      4,
      3,
      3,
      11,
      6,
      6,
      6,
      5,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      0,
      1,
      2,
      3,
      5,
      8,
      7,
      1,
      1,
      1,
      4,
      6,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      1,
      1,
      1,
      1,
      1,
      2,
      1,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      3,
      1,
      3,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      3,
      1,
      1,
      1,
      1,
      1,
      3,
      1,
      3,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      3,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1
   };

   private class_3687() {
   }

   public static byte[] method_17149(String var0) {
      try {
         return var0.getBytes("UTF8");
      } catch (UnsupportedEncodingException var4) {
         throw new class_3341(var4);
      }
   }

   public static byte[] method_17152(String var0) {
      try {
         return var0.getBytes("ASCII");
      } catch (UnsupportedEncodingException var4) {
         throw new class_3341(var4);
      }
   }

   public static String method_17156(byte[] var0) {
      return method_17157(var0, 0, var0.length);
   }

   public static String method_17157(byte[] var0, int var1, int var2) {
      try {
         return new String(var0, var1, var2, "ASCII");
      } catch (UnsupportedEncodingException var6) {
         throw new class_3341(var6);
      }
   }

   public static String method_17155(byte[] var0) throws InvalidDataException {
      return method_17154(ByteBuffer.wrap(var0));
   }

   public static String method_17154(ByteBuffer var0) throws InvalidDataException {
      CharsetDecoder var3 = Charset.forName("UTF8").newDecoder();
      var3.onMalformedInput(field_18069);
      var3.onUnmappableCharacter(field_18069);

      try {
         ((Buffer)var0).mark();
         String var4 = var3.decode(var0).toString();
         ((Buffer)var0).reset();
         return var4;
      } catch (CharacterCodingException var6) {
         throw new class_9615(1007, var6);
      }
   }

   public static boolean method_17151(ByteBuffer var0, int var1) {
      int var4 = var0.remaining();
      if (var4 < var1) {
         return false;
      } else {
         int var5 = 0;

         for (int var6 = var1; var6 < var4; var6++) {
            var5 = field_18068[256 + (var5 << 4) + field_18068[255 & var0.get(var6)]];
            if (var5 == 1) {
               return false;
            }
         }

         return true;
      }
   }

   public static boolean method_17150(ByteBuffer var0) {
      return method_17151(var0, 0);
   }
}
